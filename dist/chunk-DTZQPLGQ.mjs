import{buildCommand as g,numberParser as h}from"@stricli/core";import{ConsentTrackerStatus as m}from"@transcend-io/privacy-types";import{ScopeName as l,TRANSCEND_SCOPES as o}from"@transcend-io/privacy-types";function c(t){if(!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t))throw new Error(`Invalid UUID format: ${t}`);return t}function r(t){try{return new URL(t).toString()}catch{throw new Error(`Invalid URL format: ${t}`)}}function b(t){return t.split(",").map(a=>a.trim()).filter(a=>a.length>0)}function S(t){let a=new Date(t);if(Number.isNaN(a.getTime()))throw new TypeError(`Invalid date: ${t}. Try using the ISO 8601 format (YYYY-MM-DDTHH:MM:SS.SSSZ)`);return a}var n=({scopes:t,requiresSiloScope:a=!1})=>{let s={kind:"parsed",parse:String,brief:"The Transcend API key."};return a&&(s.brief+=" This key must be associated with the data silo(s) being operated on."),t==="Varies"?{...s,brief:`${s.brief} The scopes required will vary depending on the operation performed. If in doubt, the ${o[l.FullAdmin].title} scope will always work.`}:t.length===0?{...s,brief:`${s.brief} No scopes are required for this command.`}:{...s,brief:`${s.brief} Requires scopes: ${t.map(f=>`"${o[f].title}"`).join(", ")}`}},p=(t="https://api.transcend.io")=>({kind:"parsed",parse:r,brief:"URL of the Transcend backend. Use https://api.us.transcend.io for US hosting",default:t}),k=()=>({kind:"parsed",parse:String,brief:"The Sombra internal key, use for additional authentication when self-hosting Sombra",optional:!0});import{makeEnum as d}from"@transcend-io/type-utils";var i=(e=>(e.ApiKeys="apiKeys",e.Attributes="customFields",e.Templates="templates",e.DataSilos="dataSilos",e.Enrichers="enrichers",e.DataFlows="dataFlows",e.BusinessEntities="businessEntities",e.Actions="actions",e.DataSubjects="dataSubjects",e.Identifiers="identifiers",e.Cookies="cookies",e.ConsentManager="consentManager",e.Partitions="partitions",e.Prompts="prompts",e.PromptPartials="promptPartials",e.PromptGroups="promptGroups",e.Agents="agents",e.AgentFunctions="agentFunctions",e.AgentFiles="agentFiles",e.Vendors="vendors",e.DataCategories="dataCategories",e.ProcessingPurposes="processingPurposes",e.ActionItems="actionItems",e.ActionItemCollections="actionItemCollections",e.Teams="teams",e.PrivacyCenters="privacyCenters",e.Policies="policies",e.Messages="messages",e.Assessments="assessments",e.AssessmentTemplates="assessmentTemplates",e.Purposes="purposes",e))(i||{}),C=d({RedactEmail:"redactEmail",Log:"log",LogToTranscend:"logToTranscend",ApplyTranscendPolicies:"applyTranscendPolicies"}),D=d({ChatCompletion:"/v1/chat/completions",Embeddings:"/v1/embeddings",Completions:"/v1/completions",Agents:"/v1/assistants",Agent:"/v1/assistants/:assistantId",Threads:"/v1/threads",Thread:"/v1/threads/:threadId",Messages:"/v1/threads/:threadId/messages",Message:"/v1/threads/:threadId/messages/:messageId",Runs:"/v1/threads/:threadId/runs",Run:"/v1/threads/:threadId/runs/:runId",Files:"/v1/files",File:"/v1/files/:fileId"});var u=["dataSilos","enrichers","templates","apiKeys"],L=Object.values(m),M=g({loader:async()=>{let{pull:t}=await import("./impl-FAX2GXFC.mjs");return t},parameters:{flags:{auth:n({scopes:"Varies"}),resources:{kind:"enum",values:Object.values(i),brief:`The different resource types to pull in. Defaults to ${u.join(",")}.`,variadic:",",optional:!0},file:{kind:"parsed",parse:String,brief:"Path to the YAML file to pull into",default:"./transcend.yml"},transcendUrl:p(),dataSiloIds:{kind:"parsed",parse:String,variadic:",",brief:"The UUIDs of the data silos that should be pulled into the YAML file",optional:!0},integrationNames:{kind:"parsed",parse:String,variadic:",",brief:"The types of integrations to pull down",optional:!0},trackerStatuses:{kind:"enum",values:Object.values(m),variadic:",",brief:"The statuses of consent manager trackers to pull down. Defaults to all statuses.",optional:!0},pageSize:{kind:"parsed",parse:h,brief:"The page size to use when paginating over the API",default:"50"},skipDatapoints:{kind:"boolean",brief:"When true, skip pulling in datapoints alongside data silo resource",default:!1},skipSubDatapoints:{kind:"boolean",brief:"When true, skip pulling in subDatapoints alongside data silo resource",default:!1},includeGuessedCategories:{kind:"boolean",brief:"When true, included guessed data categories that came from the content classifier",default:!1},debug:{kind:"boolean",brief:"Set to true to include debug logs while pulling the configuration",default:!1}}},docs:{brief:"Pull configuration from Transcend",fullDescription:`Generate's a transcend.yml by pulling the configuration from your connected services view.

The API key needs various scopes depending on the resources being pulled.`}});export{c as a,r as b,b as c,S as d,n as e,p as f,k as g,u as h,L as i,M as j};
