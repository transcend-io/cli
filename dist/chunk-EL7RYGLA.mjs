import{a as i,b as l,c as n,d as s,e as r,f as a,g as o,j as g}from"./chunk-DTZQPLGQ.mjs";import{buildInstallCommand as Ot,buildUninstallCommand as Bt}from"@stricli/auto-complete";import{buildApplication as Wt,buildRouteMap as Lt}from"@stricli/core";import{buildRouteMap as ke}from"@stricli/core";import{buildCommand as ye}from"@stricli/core";var y=ye({loader:async()=>{let{generateApiKeys:e}=await import("./impl-EH6I3L6M.mjs");return e},parameters:{flags:{email:{kind:"parsed",parse:String,brief:"The email address that you use to log into Transcend"},password:{kind:"parsed",parse:String,brief:"The password for your account login"},apiKeyTitle:{kind:"parsed",parse:String,brief:"The title of the API key being generated or destroyed"},file:{kind:"parsed",parse:String,brief:"The file where API keys should be written to"},scopes:{kind:"parsed",parse:String,variadic:",",brief:"The list of scopes that should be given to the API key"},deleteExistingApiKey:{kind:"boolean",brief:"When true, if an API key exists with the specified apiKeyTitle, the existing API key is deleted",default:!0},createNewApiKey:{kind:"boolean",brief:"When true, new API keys will be created. Set to false if you simply want to delete all API keys with a title",default:!0},parentOrganizationId:{kind:"parsed",parse:i,brief:"Filter for only a specific organization by ID, returning all child accounts associated with that organization",optional:!0},transcendUrl:a()}},docs:{brief:"Generate API keys",fullDescription:`This command allows for creating API keys across multiple Transcend instances. This is useful for customers that are managing many Transcend instances and need to regularly create, cycle or delete API keys across all of their instances.

Unlike the other commands that rely on API key authentication, this command relies upon username/password authentication. This command will spit out the API keys into a JSON file, and that JSON file can be used in subsequent cli commands.

Authentication requires your email and password for the Transcend account. This command will only generate API keys for Transcend instances where you have the permission to "Manage API Keys".`}});var k=ke({routes:{"generate-api-keys":y},docs:{brief:"Admin commands"}});import{buildRouteMap as xe}from"@stricli/core";import{buildCommand as Se}from"@stricli/core";import{ScopeName as we}from"@transcend-io/privacy-types";var S=Se({loader:async()=>{let{buildXdiSyncEndpoint:e}=await import("./impl-YN5D7GUW.mjs");return e},parameters:{flags:{auth:r({scopes:[we.ViewConsentManager]}),xdiLocation:{kind:"parsed",parse:String,brief:"The location of the XDI that will be loaded by the generated sync endpoint"},file:{kind:"parsed",parse:String,brief:"The HTML file path where the sync endpoint should be written",default:"./sync-endpoint.html"},removeIpAddresses:{kind:"boolean",brief:"When true, remove IP addresses from the domain list",default:!0},domainBlockList:{kind:"parsed",parse:n,brief:"The set of domains that should be excluded from the sync endpoint. Comma-separated list.",default:"localhost"},xdiAllowedCommands:{kind:"parsed",parse:String,brief:"The allowed set of XDI commands",default:"ConsentManager:Sync"},transcendUrl:a()}},docs:{brief:"Build XDI sync endpoint",fullDescription:"This command allows for building of the XDI Sync Endpoint across a set of Transcend accounts."}});import{buildCommand as Ce}from"@stricli/core";var w=Ce({loader:async()=>{let{consentManagerServiceJsonToYml:e}=await import("./impl-VBWO5BZ2.mjs");return e},parameters:{flags:{file:{kind:"parsed",parse:String,brief:"Path to the services.json file, output of await airgap.getMetadata()",default:"./services.json"},output:{kind:"parsed",parse:String,brief:"Path to the output transcend.yml to write to",default:"./transcend.yml"}}},docs:{brief:"Convert consent manager service JSON to YML",fullDescription:"Import the services from an airgap.js file into a Transcend instance."}});import{buildCommand as Pe}from"@stricli/core";var C=Pe({loader:async()=>{let{consentManagersToBusinessEntities:e}=await import("./impl-F2DMFD3D.mjs");return e},parameters:{flags:{consentManagerYmlFolder:{kind:"parsed",parse:String,brief:"Path to the folder of Consent Manager transcend.yml files to combine"},output:{kind:"parsed",parse:String,brief:"Path to the output transcend.yml with business entity configuration",default:"./combined-business-entities.yml"}}},docs:{brief:"Convert consent managers to business entities",fullDescription:"This command allows for converting a folder or Consent Manager transcend.yml files into a single transcend.yml file where each consent manager configuration is a Business Entity in the data inventory."}});import{buildCommand as Te}from"@stricli/core";import{ScopeName as qe}from"@transcend-io/privacy-types";var P=Te({loader:async()=>{let{pullConsentMetrics:e}=await import("./impl-XDJVQKF6.mjs");return e},parameters:{flags:{auth:r({scopes:[qe.ViewConsentManager]}),start:{kind:"parsed",parse:s,brief:"The start date to pull metrics from"},end:{kind:"parsed",parse:s,brief:"The end date to pull metrics until",optional:!0},folder:{kind:"parsed",parse:String,brief:"The folder to save metrics to",default:"./consent-metrics/"},bin:{kind:"parsed",parse:String,brief:"The bin metric when pulling data (1h or 1d)",default:"1d"},transcendUrl:a()}},docs:{brief:"Pull consent metrics",fullDescription:"This command allows for pulling consent manager metrics for a Transcend account, or a set of Transcend accounts."}});import{buildCommand as Ae,numberParser as ve}from"@stricli/core";import{ScopeName as De}from"@transcend-io/privacy-types";var T=Ae({loader:async()=>{let{pullConsentPreferences:e}=await import("./impl-XBP3UHN3.mjs");return e},parameters:{flags:{auth:r({scopes:[De.ViewManagedConsentDatabaseAdminApi]}),partition:{kind:"parsed",parse:String,brief:"The partition key to download consent preferences to"},sombraAuth:o(),file:{kind:"parsed",parse:String,brief:"Path to the CSV file to save preferences to",default:"./preferences.csv"},transcendUrl:a(),timestampBefore:{kind:"parsed",parse:s,brief:"Filter for consents updated this time",optional:!0},timestampAfter:{kind:"parsed",parse:s,brief:"Filter for consents updated after this time",optional:!0},identifiers:{kind:"parsed",parse:String,variadic:",",brief:"Filter for specific identifiers",optional:!0},concurrency:{kind:"parsed",parse:ve,brief:"The concurrency to use when downloading consents in parallel",default:"100"}}},docs:{brief:"Pull consent preferences",fullDescription:"This command allows for pull of consent preferences from the Managed Consent Database."}});import{buildCommand as Ie}from"@stricli/core";import{ScopeName as Re}from"@transcend-io/privacy-types";var q=Ie({loader:async()=>{let{updateConsentManager:e}=await import("./impl-K7KKOHDZ.mjs");return e},parameters:{flags:{auth:r({scopes:[Re.ManageConsentManagerDeveloperSettings]}),bundleTypes:{kind:"parsed",parse:n,brief:"The bundle types to deploy. Comma-separated list.",default:"PRODUCTION,TEST"},deploy:{kind:"boolean",brief:"When true, deploy the Consent Manager after updating the version",default:!1},transcendUrl:a()}},docs:{brief:"Update consent manager",fullDescription:"This command allows for updating Consent Manager to latest version. The consent manager bundle can also be deployed using this command."}});import{buildCommand as Me,numberParser as _e}from"@stricli/core";var A=Me({loader:async()=>{let{uploadConsentPreferences:e}=await import("./impl-KEMGTXNP.mjs");return e},parameters:{flags:{base64EncryptionKey:{kind:"parsed",parse:String,brief:"The encryption key used to encrypt the userId"},base64SigningKey:{kind:"parsed",parse:String,brief:"The signing key used to prove authentication of consent request"},partition:{kind:"parsed",parse:String,brief:"The partition key to download consent preferences to"},file:{kind:"parsed",parse:String,brief:"The file to pull consent preferences from",default:"./preferences.csv"},consentUrl:{kind:"parsed",parse:l,brief:"URL of the Transcend Consent backend. Use https://consent.us.transcend.io for US hosting",default:"https://consent.transcend.io"},concurrency:{kind:"parsed",parse:_e,brief:"The concurrency to use when uploading requests in parallel",default:"100"}}},docs:{brief:"Upload consent preferences",fullDescription:"This command allows for updating of consent preferences to the Managed Consent Database."}});import{buildCommand as Ve}from"@stricli/core";import{ScopeName as Ue}from"@transcend-io/privacy-types";var v=Ve({loader:async()=>{let{uploadCookiesFromCsv:e}=await import("./impl-7ZILFZEM.mjs");return e},parameters:{flags:{auth:r({scopes:[Ue.ManageDataFlow]}),trackerStatus:{kind:"parsed",parse:String,brief:'Whether or not to upload the cookies into the "Approved" tab (LIVE) or the "Triage" tab (NEEDS_REVIEW)'},file:{kind:"parsed",parse:String,brief:"Path to the CSV file to upload",default:"./cookies.csv"},transcendUrl:a()}},docs:{brief:"Upload cookies from CSV",fullDescription:"This command allows for uploading cookies from CSV."}});import{buildCommand as Ne}from"@stricli/core";import{ScopeName as je}from"@transcend-io/privacy-types";var D=Ne({loader:async()=>{let{uploadDataFlowsFromCsv:e}=await import("./impl-MTSN7GL4.mjs");return e},parameters:{flags:{auth:r({scopes:[je.ManageDataFlow]}),trackerStatus:{kind:"parsed",parse:String,brief:'Whether or not to upload the data flows into the "Approved" tab (LIVE) or the "Triage" tab (NEEDS_REVIEW)'},file:{kind:"parsed",parse:String,brief:"Path to the CSV file to upload",default:"./data-flows.csv"},classifyService:{kind:"boolean",brief:"When true, automatically assign the service for a data flow based on the domain that is specified",default:!1},transcendUrl:a()}},docs:{brief:"Upload data flows from CSV",fullDescription:"This command allows for uploading of data flows from CSV."}});import{buildCommand as Ee}from"@stricli/core";import{ScopeName as p}from"@transcend-io/privacy-types";var I=Ee({loader:async()=>{let{uploadPreferences:e}=await import("./impl-EKDCF5TU.mjs");return e},parameters:{flags:{auth:r({scopes:[p.ManageStoredPreferences,p.ViewManagedConsentDatabaseAdminApi,p.ViewPreferenceStoreSettings]}),partition:{kind:"parsed",parse:String,brief:"The partition key to download consent preferences to"},sombraAuth:o(),consentUrl:{kind:"parsed",parse:l,brief:"URL of the Transcend backend. Use https://consent.us.transcend.io for US hosting",default:"https://consent.transcend.io"},file:{kind:"parsed",parse:String,brief:"Path to the CSV file to load preferences from",optional:!0},directory:{kind:"parsed",parse:String,brief:"Path to the directory of CSV files to load preferences from",optional:!0},dryRun:{kind:"boolean",brief:"Whether to do a dry run only - will write results to receiptFilepath without updating Transcend",default:!1},skipExistingRecordCheck:{kind:"boolean",brief:"Whether to skip the check for existing records. SHOULD ONLY BE USED FOR INITIAL UPLOAD",default:!1},receiptFileDir:{kind:"parsed",parse:String,brief:"Directory path where the response receipts should be saved",default:"./receipts"},skipWorkflowTriggers:{kind:"boolean",brief:"Whether to skip workflow triggers when uploading to preference store",default:!1},forceTriggerWorkflows:{kind:"boolean",brief:"Whether to force trigger workflows for existing consent records",default:!1},skipConflictUpdates:{kind:"boolean",brief:"Whether to skip uploading of any records where the preference store and file have a hard conflict",default:!1},isSilent:{kind:"boolean",brief:"Whether to skip sending emails in workflows",default:!0},attributes:{kind:"parsed",parse:String,brief:"Attributes to add to any DSR request if created",default:"Tags:transcend-cli,Source:transcend-cli"},receiptFilepath:{kind:"parsed",parse:String,brief:"Store resulting, continuing where left off",default:"./preference-management-upload-receipts.json"}}},docs:{brief:"Upload preferences",fullDescription:"This command allows for updating of preference management data to your Transcend Preference Store."}});var R=xe({routes:{"build-xdi-sync-endpoint":S,"pull-consent-metrics":P,"pull-consent-preferences":T,"update-consent-manager":q,"upload-consent-preferences":A,"upload-cookies-from-csv":v,"upload-data-flows-from-csv":D,"upload-preferences":I,"consent-manager-service-json-to-yml":w,"consent-managers-to-business-entities":C},docs:{brief:"Consent commands"}});import{buildRouteMap as Xe}from"@stricli/core";import{buildCommand as Fe}from"@stricli/core";var M=Fe({loader:async()=>{let{deriveDataSilosFromDataFlowsCrossInstance:e}=await import("./impl-AGSRZPF7.mjs");return e},parameters:{flags:{auth:r({scopes:[]}),dataFlowsYmlFolder:{kind:"parsed",parse:String,brief:"The folder that contains data flow yml files"},output:{kind:"parsed",parse:String,brief:"The output transcend.yml file containing the data silo configurations",default:"./transcend.yml"},ignoreYmls:{kind:"parsed",parse:String,variadic:",",brief:"The set of yml files that should be skipped when uploading",optional:!0},transcendUrl:a()}},docs:{brief:"Derive data silos from data flows cross instance",fullDescription:"Given a folder of data flow transcend.yml configurations, convert those configurations to a single transcend.yml configurations of all related data silos."}});import{buildCommand as Oe}from"@stricli/core";var _=Oe({loader:async()=>{let{deriveDataSilosFromDataFlows:e}=await import("./impl-AWTTPJL3.mjs");return e},parameters:{flags:{auth:r({scopes:[]}),dataFlowsYmlFolder:{kind:"parsed",parse:String,brief:"The folder that contains data flow yml files"},dataSilosYmlFolder:{kind:"parsed",parse:String,brief:"The folder that contains data silo yml files"},ignoreYmls:{kind:"parsed",parse:String,variadic:",",brief:"The set of yml files that should be skipped when uploading",optional:!0},transcendUrl:a()}},docs:{brief:"Derive data silos from data flows",fullDescription:"Given a folder of data flow transcend.yml configurations, convert those configurations to set of data silo transcend.yml configurations."}});import{buildCommand as Be}from"@stricli/core";import{ScopeName as We}from"@transcend-io/privacy-types";var V=Be({loader:async()=>{let{discoverSilos:e}=await import("./impl-MWER6XI6.mjs");return e},parameters:{flags:{scanPath:{kind:"parsed",parse:String,brief:"File path in the project to scan"},dataSiloId:{kind:"parsed",parse:i,brief:"The UUID of the corresponding data silo"},auth:r({scopes:[We.ManageAssignedDataInventory],requiresSiloScope:!0}),fileGlobs:{kind:"parsed",parse:String,brief:"You can pass a glob syntax pattern(s) to specify additional file paths to scan",optional:!0}}},docs:{brief:"Discover silos",fullDescription:"Transcend can help scan dependency management files to help detect new data silos where you may be storing user personal data."}});import{buildCommand as Le}from"@stricli/core";import{ScopeName as Ge}from"@transcend-io/privacy-types";var U=Le({loader:async()=>{let{pullDatapoints:e}=await import("./impl-6X6RYS54.mjs");return e},parameters:{flags:{auth:r({scopes:[Ge.ViewDataInventory]}),file:{kind:"parsed",parse:String,brief:"The file to save datapoints to",default:"./datapoints.csv"},transcendUrl:a(),dataSiloIds:{kind:"parsed",parse:String,brief:"Comma-separated list of data silo IDs to filter by",optional:!0},includeAttributes:{kind:"boolean",brief:"Whether to include attributes in the output",default:!1},includeGuessedCategories:{kind:"boolean",brief:"Whether to include guessed categories in the output",default:!1},parentCategories:{kind:"parsed",parse:String,brief:"Comma-separated list of parent categories to filter by",optional:!0},subCategories:{kind:"parsed",parse:String,brief:"Comma-separated list of subcategories to filter by",optional:!0}}},docs:{brief:"Pull datapoints",fullDescription:"This command allows for pulling your Data Inventory -> Datapoints into a CSV."}});import{buildCommand as Ye}from"@stricli/core";import{ScopeName as Ke}from"@transcend-io/privacy-types";var N=Ye({loader:async()=>{let{pullUnstructuredDiscoveryFiles:e}=await import("./impl-U4342ART.mjs");return e},parameters:{flags:{auth:r({scopes:[Ke.ViewDataInventory]}),file:{kind:"parsed",parse:String,brief:"The file to save datapoints to",default:"./unstructured-discovery-files.csv"},transcendUrl:a(),dataSiloIds:{kind:"parsed",parse:String,brief:"Comma-separated list of data silo IDs to filter by",optional:!0},subCategories:{kind:"parsed",parse:String,brief:"Comma-separated list of data categories to filter by",optional:!0},status:{kind:"parsed",parse:String,brief:"Comma-separated list of classification statuses to filter by",optional:!0},includeEncryptedSnippets:{kind:"boolean",brief:"Whether to include encrypted snippets of the entries classified",default:!1}}},docs:{brief:"Pull unstructured discovery files",fullDescription:"This command allows for pulling Unstructured Discovery into a CSV."}});import{buildCommand as ze,numberParser as Je}from"@stricli/core";var j=ze({loader:async()=>{let{push:e}=await import("./impl-GOH2XROQ.mjs");return e},parameters:{flags:{auth:r({scopes:"Varies"}),file:{kind:"parsed",parse:String,brief:"Path to the YAML file to push from",default:"./transcend.yml"},transcendUrl:a(),pageSize:{kind:"parsed",parse:Je,brief:"The page size to use when paginating over the API",default:"50"},variables:{kind:"parsed",parse:String,brief:"The variables to template into the YAML file when pushing configuration",optional:!0},classifyService:{kind:"boolean",brief:"When true, automatically assign the service for a data flow based on the domain that is specified",default:!1},deleteExtraAttributeValues:{kind:"boolean",brief:"When true and syncing attributes, delete any extra attributes instead of just upserting",default:!1}}},docs:{brief:"Push configuration to Transcend",fullDescription:"Given a transcend.yml file, sync the contents up to your connected services view."}});import{buildCommand as $e}from"@stricli/core";import{ScopeName as He}from"@transcend-io/privacy-types";var E=$e({loader:async()=>{let{scanPackages:e}=await import("./impl-FOSZT3DL.mjs");return e},parameters:{flags:{auth:r({scopes:[He.ManageCodeScanning]}),scanPath:{kind:"parsed",parse:String,brief:"File path in the project to scan",default:"./"},ignoreDirs:{kind:"parsed",parse:String,variadic:",",brief:"List of directories to ignore in scan",optional:!0},packageName:{kind:"parsed",parse:String,brief:"Name of the git repository that the package should be tied to",optional:!0},transcendUrl:a()}},docs:{brief:"Scan packages",fullDescription:"Transcend can scan your codebase to inventory your code packages and dependencies."}});var x=Xe({routes:{pull:g,push:j,"scan-packages":E,"discover-silos":V,"pull-datapoints":U,"pull-unstructured-discovery-files":N,"derive-data-silos-from-data-flows":_,"derive-data-silos-from-data-flows-cross-instance":M},docs:{brief:"Inventory commands"}});import{buildRouteMap as et}from"@stricli/core";import{buildCommand as Qe}from"@stricli/core";import{ScopeName as Ze}from"@transcend-io/privacy-types";var F=Qe({loader:async()=>{let{syncOt:e}=await import("./impl-3FYTEOQC.mjs");return e},parameters:{flags:{hostname:{kind:"parsed",parse:String,brief:"The domain of the OneTrust environment from which to pull the resource",optional:!0},oneTrustAuth:{kind:"parsed",parse:String,brief:"The OAuth access token with the scopes necessary to access the OneTrust Public APIs",optional:!0},source:{kind:"parsed",parse:String,brief:"Whether to read the assessments from OneTrust or from a file",default:"oneTrust"},transcendAuth:{...r({scopes:[Ze.ManageAssessments]}),optional:!0},transcendUrl:a(),file:{kind:"parsed",parse:String,brief:"Path to the file to pull the resource into. Must be a json file!",optional:!0},resource:{kind:"parsed",parse:String,brief:"The resource to pull from OneTrust. For now, only assessments is supported",default:"assessments"},dryRun:{kind:"boolean",brief:"Whether to export the resource to a file rather than sync to Transcend",default:!1},debug:{kind:"boolean",brief:"Whether to print detailed logs in case of error",default:!1}}},docs:{brief:"Sync OneTrust data",fullDescription:`Pulls resources from a OneTrust and syncs them to a Transcend instance. For now, it only supports retrieving OneTrust Assessments.

This command can be helpful if you are looking to:
- Pull resources from your OneTrust account.
- Migrate your resources from your OneTrust account to Transcend.

OneTrust authentication requires an OAuth Token with scope for accessing the assessment endpoints.
If syncing the resources to Transcend, you will also need to generate an API key on the Transcend Admin Dashboard.`}});var O=et({routes:{"sync-ot":F},docs:{brief:"Migration commands"}});import{buildRouteMap as Ft}from"@stricli/core";import{buildCommand as tt,numberParser as rt}from"@stricli/core";import{ScopeName as c}from"@transcend-io/privacy-types";var B=tt({loader:async()=>{let{approve:e}=await import("./impl-W3DYHNC3.mjs");return e},parameters:{flags:{auth:r({scopes:[c.RequestApproval,c.ViewRequests,c.ManageRequestCompilation]}),actions:{kind:"parsed",parse:String,variadic:",",brief:"The request actions to approve"},origins:{kind:"parsed",parse:String,variadic:",",brief:"The request origins to approve",optional:!0},silentModeBefore:{kind:"parsed",parse:s,brief:"Any requests made before this date should be marked as silent mode",optional:!0},createdAtBefore:{kind:"parsed",parse:s,brief:"Approve requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Approve requests that were submitted after this time",optional:!0},transcendUrl:a(),concurrency:{kind:"parsed",parse:rt,brief:"The concurrency to use when uploading requests in parallel",default:"50"}}},docs:{brief:"Bulk approve a set of privacy requests",fullDescription:"Bulk approve a set of privacy requests from the DSR Automation -> Incoming Requests tab."}});import{buildCommand as at,numberParser as st}from"@stricli/core";import{ScopeName as W}from"@transcend-io/privacy-types";var L=at({loader:async()=>{let{cancel:e}=await import("./impl-T3SXQO4G.mjs");return e},parameters:{flags:{auth:r({scopes:[W.ViewRequests,W.RequestApproval]}),actions:{kind:"parsed",parse:String,variadic:",",brief:"The request actions to cancel"},statuses:{kind:"parsed",parse:n,brief:"The request statuses to cancel. Comma-separated list.",default:"REQUEST_MADE,WAITING,ENRICHING,COMPILING,DELAYED,APPROVING,SECONDARY,SECONDARY_APPROVING"},requestIds:{kind:"parsed",parse:String,variadic:",",brief:"Specify the specific request IDs to cancel",optional:!0},silentModeBefore:{kind:"parsed",parse:s,brief:"Any requests made before this date should be marked as silent mode for canceling to skip email sending",optional:!0},createdAtBefore:{kind:"parsed",parse:s,brief:"Cancel requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Cancel requests that were submitted after this time",optional:!0},cancellationTitle:{kind:"parsed",parse:String,brief:"The title of the email template that should be sent to the requests upon cancelation",default:"Request Canceled"},transcendUrl:a(),concurrency:{kind:"parsed",parse:st,brief:"The concurrency to use when uploading requests in parallel",default:"50"}}},docs:{brief:"Bulk cancel a set of privacy requests",fullDescription:"Bulk cancel a set of privacy requests from the DSR Automation -> Incoming Requests tab."}});import{buildRouteMap as nt}from"@stricli/core";import{buildCommand as ot}from"@stricli/core";import{ScopeName as t}from"@transcend-io/privacy-types";var m="Small package containing useful typescript utilities.",u="7.0.0";var d="transcend",Y="https://app.transcend.io",Za=`${Y}/infrastructure/integrations`,es=`${Y}/data-map/data-inventory/data-points`,ts=process.env.TRANSCEND_API_URL||"https://api.transcend.io",rs=process.env.TRANSCEND_CONSENT_API_URL||"https://consent.transcend.io",as={apiKeys:[t.ViewApiKeys],templates:[t.ManageEmailTemplates],dataSilos:[t.ManageDataMap,t.ConnectDataSilos],enrichers:[t.ManageRequestIdentities],businessEntities:[t.ManageDataInventory],identifiers:[t.ManageRequestIdentities],customFields:[t.ManageGlobalAttributes],dataFlows:[t.ManageDataFlow],cookies:[t.ManageDataFlow],consentManager:[t.ManageConsentManagerDeveloperSettings],partitions:[t.ManageConsentManagerDeveloperSettings],actions:[t.ManageDataSubjectRequestSettings],dataSubjects:[t.ManageDataSubjectRequestSettings],prompts:[t.ManagePrompts],promptPartials:[t.ManagePrompts],promptGroups:[t.ManagePrompts],agents:[t.ManagePathfinder],agentFunctions:[t.ManagePathfinder],agentFiles:[t.ManagePathfinder],vendors:[t.ManageDataInventory],dataCategories:[t.ManageDataInventory],processingPurposes:[t.ManageDataInventory],actionItems:[t.ManageAllActionItems,t.ViewGlobalAttributes],actionItemCollections:[t.ManageActionItemCollections],teams:[t.ManageAccessControl],messages:[t.ManageIntlMessages],privacyCenters:[t.ManagePrivacyCenter],policies:[t.ManagePolicies],assessments:[t.ManageAssessments],assessmentTemplates:[t.ManageAssessments],purposes:[t.ManageConsentManager,t.ManagePreferenceStoreSettings]},ss={apiKeys:[t.ViewApiKeys],templates:[t.ViewEmailTemplates],dataSilos:[t.ViewDataMap,t.ViewDataSubjectRequestSettings],enrichers:[t.ViewRequestIdentitySettings],businessEntities:[t.ViewDataInventory],identifiers:[t.ViewRequestIdentitySettings],customFields:[t.ViewGlobalAttributes],dataFlows:[t.ViewDataFlow],cookies:[t.ViewDataFlow],consentManager:[t.ViewConsentManager],partitions:[t.ViewConsentManager],actions:[t.ViewDataSubjectRequestSettings],dataSubjects:[t.ViewDataSubjectRequestSettings],prompts:[t.ViewPrompts],promptPartials:[t.ViewPrompts],promptGroups:[t.ViewPrompts],agents:[t.ViewPathfinder],agentFunctions:[t.ViewPathfinder],agentFiles:[t.ViewPathfinder],vendors:[t.ViewDataInventory],dataCategories:[t.ViewDataInventory],processingPurposes:[t.ViewDataInventory],actionItemCollections:[t.ViewAllActionItems],actionItems:[t.ViewAllActionItems],teams:[t.ViewScopes],messages:[t.ViewIntlMessages],privacyCenters:[t.ViewPrivacyCenter],policies:[t.ViewPolicies],assessments:[t.ViewAssessments],assessmentTemplates:[t.ViewAssessments],purposes:[t.ViewConsentManager,t.ViewPreferenceStoreSettings]},os={apiKeys:"api-keys",customFields:"attributes",dataFlows:"data-flows",cookies:"cookies",consentManager:"consent-manager",partitions:"partitions",actions:"actions",dataSubjects:"data-subjects",businessEntities:"business-entities",identifiers:"identifiers",enrichers:"enrichers",dataSilos:"data-silos",templates:"templates",prompts:"prompts",promptPartials:"prompt-partials",promptGroups:"prompt-groups",agents:"agents",agentFunctions:"agent-functions",agentFiles:"agent-files",vendors:"vendors",dataCategories:"data-categories",processingPurposes:"processing-purposes",actionItems:"action-items",actionItemCollections:"action-item-collections",teams:"teams",messages:"messages",privacyCenters:"privacy-center",policies:"policies",assessments:"assessments",assessmentTemplates:"assessment-templates",purposes:"purposes"};var K=ot({loader:async()=>{let{markIdentifiersCompleted:e}=await import("./impl-XUDVUI6T.mjs");return e},parameters:{flags:{auth:r({scopes:[],requiresSiloScope:!0}),dataSiloId:{kind:"parsed",parse:i,brief:"The ID of the data silo to pull in"},file:{kind:"parsed",parse:String,brief:"Path to the CSV file where identifiers will be written to",default:"./cron-identifiers.csv"},transcendUrl:a(),sombraAuth:o()}},docs:{brief:"Mark identifiers as completed after processing.",fullDescription:`This command takes the output of tr-cron-pull-identifiers and notifies Transcend that all of the requests in the CSV have been processed.
This is used in the workflow like:

1. Pull identifiers to CSV:
   ${d} request cron pull-identifiers --auth=$TRANSCEND_API_KEY --dataSiloId=70810f2e-cf90-43f6-9776-901a5950599f --actions=ERASURE --file=./outstanding-requests.csv
2. Run your process to operate on that CSV of requests.
3. Notify Transcend of completion
   ${d} request cron mark-identifiers-completed --auth=$TRANSCEND_API_KEY --dataSiloId=70810f2e-cf90-43f6-9776-901a5950599f --file=./outstanding-requests.csv

Read more at https://docs.transcend.io/docs/integrations/cron-job-integration.`}});import{buildCommand as it,numberParser as z}from"@stricli/core";var J=it({loader:async()=>{let{pullIdentifiers:e}=await import("./impl-BTAYEUJ7.mjs");return e},parameters:{flags:{auth:r({scopes:[],requiresSiloScope:!0}),dataSiloId:{kind:"parsed",parse:i,brief:"The ID of the data silo to pull in"},actions:{kind:"parsed",parse:String,brief:"The request action to restart"},file:{kind:"parsed",parse:String,brief:"Path to the CSV file where identifiers will be written to",default:"./cron-identifiers.csv"},transcendUrl:a(),sombraAuth:o(),pageLimit:{kind:"parsed",parse:z,brief:"The page limit to use when pulling in pages of identifiers",default:"100"},skipRequestCount:{kind:"boolean",brief:"Whether to skip the count of all outstanding requests. This is required to render the progress bar, but can take a long time to run if you have a large number of outstanding requests to process. In that case, we recommend setting skipRequestCount=true so that you can still proceed with fetching the identifiers",default:!1},chunkSize:{kind:"parsed",parse:z,brief:"Maximum number of rows per CSV file. For large datasets, the output will be automatically split into multiple files to avoid file system size limits. Each file will contain at most this many rows",default:"100000"}}},docs:{brief:"Pull identifiers of outstanding requests for a data silo to a CSV.",fullDescription:`If you are using the cron job integration, you can run this command to pull the outstanding identifiers for the data silo to a CSV.

For large datasets, the output will be automatically split into multiple CSV files to avoid file system size limits. Use the --chunkSize parameter to control the maximum number of rows per file.

Read more at https://docs.transcend.io/docs/integrations/cron-job-integration.`}});var $=nt({routes:{"pull-identifiers":J,"mark-identifiers-completed":K},docs:{brief:"Cron commands"}});import{buildCommand as dt,numberParser as lt}from"@stricli/core";import{ScopeName as f}from"@transcend-io/privacy-types";var H=dt({loader:async()=>{let{downloadFiles:e}=await import("./impl-4OABKSYO.mjs");return e},parameters:{flags:{auth:r({scopes:[f.ViewRequestCompilation,f.ViewRequests,f.RequestApproval]}),sombraAuth:o(),concurrency:{kind:"parsed",parse:lt,brief:"The concurrency to use when downloading requests in parallel",default:"10"},requestIds:{kind:"parsed",parse:String,variadic:",",brief:"Specify the specific request IDs to download",optional:!0},statuses:{kind:"parsed",parse:n,brief:"The request statuses to download. Comma-separated list.",default:"APPROVING,DOWNLOADABLE"},folderPath:{kind:"parsed",parse:String,brief:"The folder to download files to",default:"./dsr-files"},createdAtBefore:{kind:"parsed",parse:s,brief:"Download requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Download requests that were submitted after this time",optional:!0},approveAfterDownload:{kind:"boolean",brief:"If the request is in status=APPROVING, approve the request after its downloaded",default:!1},transcendUrl:a()}},docs:{brief:"Download the files associated with a Data Subject Access Request (DSAR)",fullDescription:"Download the files associated with a Data Subject Access Request (DSAR) from DSR Automation -> Incoming Requests tab."}});import{buildCommand as pt,numberParser as ct}from"@stricli/core";import{ScopeName as mt}from"@transcend-io/privacy-types";var X=pt({loader:async()=>{let{enricherRestart:e}=await import("./impl-ZCUYOXWI.mjs");return e},parameters:{flags:{auth:r({scopes:[mt.ManageRequestCompilation]}),enricherId:{kind:"parsed",parse:String,brief:"The ID of the enricher to restart"},actions:{kind:"parsed",parse:String,variadic:",",brief:"The request action to restart",optional:!0},requestEnricherStatuses:{kind:"parsed",parse:String,variadic:",",brief:"The request enricher statuses to restart",optional:!0},transcendUrl:a(),concurrency:{kind:"parsed",parse:ct,brief:"The concurrency to use when uploading requests in parallel",default:"15"},requestIds:{kind:"parsed",parse:String,variadic:",",brief:"Specify the specific request IDs to restart",optional:!0},createdAtBefore:{kind:"parsed",parse:s,brief:"Restart requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Restart requests that were submitted after this time",optional:!0}}},docs:{brief:"Bulk restart a particular enricher across a series of DSRs",fullDescription:`Bulk restart a particular enricher across a series of DSRs.

The API key needs the following scopes:
- Manage Request Compilation`}});import{buildCommand as ut,numberParser as ft}from"@stricli/core";import{ScopeName as Q}from"@transcend-io/privacy-types";var Z=ut({loader:async()=>{let{_export:e}=await import("./impl-L5SZ7EZB.mjs");return e},parameters:{flags:{auth:r({scopes:[Q.ViewRequests,Q.ViewRequestCompilation]}),sombraAuth:o(),actions:{kind:"parsed",parse:String,variadic:",",brief:"The request action to restart",optional:!0},statuses:{kind:"parsed",parse:String,variadic:",",brief:"The request statuses to restart",optional:!0},transcendUrl:a(),file:{kind:"parsed",parse:String,brief:"Path to the CSV file where identifiers will be written to",default:"./transcend-request-export.csv"},concurrency:{kind:"parsed",parse:ft,brief:"The concurrency to use when uploading requests in parallel",default:"100"},createdAtBefore:{kind:"parsed",parse:s,brief:"Pull requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Pull requests that were submitted after this time",optional:!0},showTests:{kind:"boolean",brief:"Filter for test requests or production requests - when not provided, pulls both",optional:!0}}},docs:{brief:"Export privacy requests and request identifiers to a CSV file",fullDescription:"Export privacy requests and request identifiers to a CSV file."}});import{buildCommand as ht,numberParser as bt}from"@stricli/core";import{ScopeName as gt}from"@transcend-io/privacy-types";var ee=ht({loader:async()=>{let{markSilent:e}=await import("./impl-SKAGLAEK.mjs");return e},parameters:{flags:{auth:r({scopes:[gt.ManageRequestCompilation]}),actions:{kind:"parsed",parse:String,variadic:",",brief:"The request actions to mark silent"},statuses:{kind:"parsed",parse:n,brief:"The request statuses to mark silent. Comma-separated list.",default:"REQUEST_MADE,WAITING,ENRICHING,COMPILING,DELAYED,APPROVING,SECONDARY,SECONDARY_APPROVING"},requestIds:{kind:"parsed",parse:String,variadic:",",brief:"Specify the specific request IDs to mark silent",optional:!0},createdAtBefore:{kind:"parsed",parse:s,brief:"Mark silent requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Mark silent requests that were submitted after this time",optional:!0},transcendUrl:a(),concurrency:{kind:"parsed",parse:bt,brief:"The concurrency to use when uploading requests in parallel",default:"50"}}},docs:{brief:"Bulk update a set of privacy requests to be in silent mode",fullDescription:"Bulk update a set of privacy requests from the DSR Automation -> Incoming Requests tab to be in silent mode."}});import{buildCommand as yt,numberParser as h}from"@stricli/core";import{ScopeName as te}from"@transcend-io/privacy-types";var re=yt({loader:async()=>{let{notifyAdditionalTime:e}=await import("./impl-KDJAI4K5.mjs");return e},parameters:{flags:{auth:r({scopes:[te.ViewRequests,te.RequestApproval]}),createdAtBefore:{kind:"parsed",parse:s,brief:"Notify requests that are open but submitted before this time"},createdAtAfter:{kind:"parsed",parse:s,brief:"Notify requests that are open but submitted after this time",optional:!0},actions:{kind:"parsed",parse:String,variadic:",",brief:"The request actions to notify",optional:!0},daysLeft:{kind:"parsed",parse:h,brief:"Only notify requests that have less than this number of days until they are considered expired",default:"10"},days:{kind:"parsed",parse:h,brief:"The number of days to adjust the expiration of the request to",default:"45"},requestIds:{kind:"parsed",parse:String,variadic:",",brief:"Specify the specific request IDs to notify",optional:!0},emailTemplate:{kind:"parsed",parse:String,brief:"The title of the email template that should be sent to the requests",default:"Additional Time Needed"},transcendUrl:a(),concurrency:{kind:"parsed",parse:h,brief:"The concurrency to use when uploading requests in parallel",default:"50"}}},docs:{brief:"Bulk notify a set of privacy requests that more time is needed",fullDescription:"Bulk notify a set of privacy requests from the DSR Automation -> Incoming Requests tab that more time is needed to complete the request. Note any request in silent mode will not be emailed."}});import{buildRouteMap as Pt}from"@stricli/core";import{buildCommand as kt,numberParser as St}from"@stricli/core";import{ScopeName as ae}from"@transcend-io/privacy-types";var se=kt({loader:async()=>{let{pullIdentifiers:e}=await import("./impl-23HZSANE.mjs");return e},parameters:{flags:{auth:r({scopes:[ae.ViewRequests,ae.ViewRequestCompilation]}),sombraAuth:o(),transcendUrl:a(),file:{kind:"parsed",parse:String,brief:"Path to the CSV file where requests will be written to",default:"./manual-enrichment-identifiers.csv"},actions:{kind:"parsed",parse:String,variadic:",",brief:"The request action to pull for",optional:!0},concurrency:{kind:"parsed",parse:St,brief:"The concurrency to use when uploading requests in parallel",default:"100"}}},docs:{brief:"Pull identifiers for manual enrichment",fullDescription:`This command pulls down the set of privacy requests that are currently pending manual enrichment.

This is useful for the following workflow:

1. Pull identifiers to CSV:
   ${d} request preflight pull-identifiers --file=./enrichment-requests.csv
2. Fill out the CSV with additional identifiers
3. Push updated back to Transcend
   ${d} request preflight push-identifiers --file=./enrichment-requests.csv`}});import{buildCommand as wt,numberParser as Ct}from"@stricli/core";import{ScopeName as oe}from"@transcend-io/privacy-types";var ie=wt({loader:async()=>{let{pushIdentifiers:e}=await import("./impl-U65MIQZR.mjs");return e},parameters:{flags:{auth:r({scopes:[oe.ManageRequestIdentities,oe.ManageRequestCompilation]}),enricherId:{kind:"parsed",parse:i,brief:"The ID of the Request Enricher to upload to"},sombraAuth:o(),transcendUrl:a(),file:{kind:"parsed",parse:String,brief:"Path to the CSV file where requests will be written to",default:"./manual-enrichment-identifiers.csv"},silentModeBefore:{kind:"boolean",brief:"When true, set requests into silent mode before enriching",default:!1},concurrency:{kind:"parsed",parse:Ct,brief:"The concurrency to use when uploading requests in parallel",default:"100"}}},docs:{brief:"Push identifiers for manual enrichment",fullDescription:`This command push up a set of identifiers for a set of requests pending manual enrichment.

This is useful for the following workflow:

1. Pull identifiers to CSV:
   ${d} request preflight pull-identifiers --file=./enrichment-requests.csv
2. Fill out the CSV with additional identifiers
3. Push updated back to Transcend
   ${d} request preflight push-identifiers --file=./enrichment-requests.csv`}});var ne=Pt({routes:{"pull-identifiers":se,"push-identifiers":ie},docs:{brief:"Preflight commands"}});import{buildCommand as Tt}from"@stricli/core";import{ScopeName as qt}from"@transcend-io/privacy-types";var de=Tt({loader:async()=>{let{rejectUnverifiedIdentifiers:e}=await import("./impl-4VXR6QGT.mjs");return e},parameters:{flags:{auth:r({scopes:[qt.ManageRequestCompilation]}),identifierNames:{kind:"parsed",parse:String,variadic:",",brief:"The names of identifiers to clear out"},actions:{kind:"parsed",parse:String,variadic:",",brief:"The request action to restart",optional:!0},transcendUrl:a()}},docs:{brief:"Bulk clear out any request identifiers that are unverified",fullDescription:"Bulk clear out any request identifiers that are unverified."}});import{buildCommand as At,numberParser as vt}from"@stricli/core";import{ScopeName as le}from"@transcend-io/privacy-types";var pe=At({loader:async()=>{let{restart:e}=await import("./impl-TFURW4U3.mjs");return e},parameters:{flags:{auth:r({scopes:[le.MakeDataSubjectRequest,le.ViewRequestCompilation]}),actions:{kind:"parsed",parse:String,variadic:",",brief:"The request action to restart"},statuses:{kind:"parsed",parse:String,variadic:",",brief:"The request statuses to restart"},transcendUrl:a(),requestReceiptFolder:{kind:"parsed",parse:String,brief:"The path to the folder where receipts of each upload are stored",default:"./privacy-request-upload-receipts"},sombraAuth:o(),concurrency:{kind:"parsed",parse:vt,brief:"The concurrency to use when uploading requests in parallel",default:"15"},requestIds:{kind:"parsed",parse:String,variadic:",",brief:"Specify the specific request IDs to restart",optional:!0},emailIsVerified:{kind:"boolean",brief:"Indicate whether the primary email address is verified. Set to false to send a verification email",default:!0},createdAt:{kind:"parsed",parse:s,brief:"Restart requests that were submitted before a specific date",optional:!0},silentModeBefore:{kind:"parsed",parse:s,brief:"Requests older than this date should be marked as silent mode",optional:!0},createdAtBefore:{kind:"parsed",parse:s,brief:"Restart requests that were submitted before this time",optional:!0},createdAtAfter:{kind:"parsed",parse:s,brief:"Restart requests that were submitted after this time",optional:!0},sendEmailReceipt:{kind:"boolean",brief:"Send email receipts to the restarted requests",default:!1},copyIdentifiers:{kind:"boolean",brief:"Copy over all enriched identifiers from the initial request",default:!1},skipWaitingPeriod:{kind:"boolean",brief:"Skip queued state of request and go straight to compiling",default:!1}}},docs:{brief:"Bulk update a set of privacy requests based on a set of request filters",fullDescription:"Bulk update a set of privacy requests based on a set of request filters."}});import{buildCommand as Dt}from"@stricli/core";import{ScopeName as It}from"@transcend-io/privacy-types";var ce=Dt({loader:async()=>{let{skipPreflightJobs:e}=await import("./impl-WH6D4GQ7.mjs");return e},parameters:{flags:{auth:r({scopes:[It.ManageRequestCompilation]}),enricherIds:{kind:"parsed",parse:String,variadic:",",brief:"The ID of the enrichers to skip privacy request jobs for"},transcendUrl:a()}},docs:{brief:"Skip preflight jobs",fullDescription:"This command allows for bulk skipping preflight checks."}});import{buildRouteMap as jt}from"@stricli/core";import{buildCommand as Rt}from"@stricli/core";import{ScopeName as Mt}from"@transcend-io/privacy-types";var me=Rt({loader:async()=>{let{markRequestDataSilosCompleted:e}=await import("./impl-6T6S4DD6.mjs");return e},parameters:{flags:{auth:r({scopes:[Mt.ManageRequestCompilation]}),dataSiloId:{kind:"parsed",parse:i,brief:"The ID of the data silo to pull in"},file:{kind:"parsed",parse:String,brief:"Path to the CSV file where identifiers will be written to",default:"./request-identifiers.csv"},transcendUrl:a()}},docs:{brief:"Mark request data silos as completed",fullDescription:`This command takes in a CSV of Request IDs as well as a Data Silo ID and marks all associated privacy request jobs as completed.
This command is useful with the "Bulk Response" UI. The CSV is expected to have 1 column named "Request Id".`}});import{buildCommand as _t}from"@stricli/core";import{ScopeName as Vt}from"@transcend-io/privacy-types";var ue=_t({loader:async()=>{let{retryRequestDataSilos:e}=await import("./impl-F6TGMMNC.mjs");return e},parameters:{flags:{auth:r({scopes:[Vt.ManageRequestCompilation]}),dataSiloId:{kind:"parsed",parse:i,brief:"The ID of the data silo to pull in"},actions:{kind:"parsed",parse:String,variadic:",",brief:"The request action to restart"},transcendUrl:a()}},docs:{brief:"Retry request data silos",fullDescription:'This command allows for bulk restarting a set of data silos jobs for open privacy requests. This is equivalent to clicking the "Wipe and Retry" button for a particular data silo across a set of privacy requests.'}});import{buildCommand as Ut}from"@stricli/core";import{ScopeName as Nt}from"@transcend-io/privacy-types";var fe=Ut({loader:async()=>{let{skipRequestDataSilos:e}=await import("./impl-M4LJIXWA.mjs");return e},parameters:{flags:{auth:r({scopes:[Nt.ManageRequestCompilation]}),dataSiloId:{kind:"parsed",parse:i,brief:"The ID of the data silo to skip privacy request jobs for"},transcendUrl:a(),statuses:{kind:"parsed",parse:n,brief:"The request statuses to mark as completed for. Comma-separated list.",default:"COMPILING,SECONDARY"},status:{kind:"parsed",parse:String,brief:"The status to set the request data silo job to",default:"SKIPPED"}}},docs:{brief:"Skip request data silos",fullDescription:"This command allows for bulk skipping all open privacy request jobs for a particular data silo. This command is useful if you want to disable a data silo and then clear out any active privacy requests that are still queued up for that data silo."}});var he=jt({routes:{"mark-request-data-silos-completed":me,"retry-request-data-silos":ue,"skip-request-data-silos":fe},docs:{brief:"System commands"}});import{buildCommand as Et,numberParser as xt}from"@stricli/core";import{ScopeName as b}from"@transcend-io/privacy-types";var be=Et({loader:async()=>{let{upload:e}=await import("./impl-GT6VWNTV.mjs");return e},parameters:{flags:{auth:r({scopes:[b.MakeDataSubjectRequest,b.ViewRequestIdentitySettings,b.ViewGlobalAttributes]}),file:{kind:"parsed",parse:String,brief:"Path to the CSV file of requests to upload",default:"./requests.csv"},transcendUrl:a(),cacheFilepath:{kind:"parsed",parse:String,brief:"The path to the JSON file encoding the metadata used to map the CSV shape to Transcend API",default:"./transcend-privacy-requests-cache.json"},requestReceiptFolder:{kind:"parsed",parse:String,brief:"The path to the folder where receipts of each upload are stored",default:"./privacy-request-upload-receipts"},sombraAuth:o(),concurrency:{kind:"parsed",parse:xt,brief:"The concurrency to use when uploading requests in parallel",default:"50"},attributes:{kind:"parsed",parse:String,brief:"Tag all of the requests with the following attributes. Format: key1:value1;value2,key2:value3;value4",default:"Tags:transcend-cli"},isTest:{kind:"boolean",brief:"Flag whether the requests being uploaded are test requests or regular requests",default:!1},isSilent:{kind:"boolean",brief:"Flag whether the requests being uploaded should be submitted in silent mode",default:!0},skipSendingReceipt:{kind:"boolean",brief:"Flag whether to skip sending of the receipt email",default:!1},emailIsVerified:{kind:"boolean",brief:"Indicate whether the email address being uploaded is pre-verified. Set to false to send a verification email",default:!0},skipFilterStep:{kind:"boolean",brief:"When true, skip the interactive step to filter down the CSV",default:!1},dryRun:{kind:"boolean",brief:"When true, perform a dry run of the upload instead of calling the API to submit the requests",default:!1},debug:{kind:"boolean",brief:"Debug logging",default:!1},defaultPhoneCountryCode:{kind:"parsed",parse:String,brief:"When uploading phone numbers, if the phone number is missing a country code, assume this country code",default:"1"}}},docs:{brief:"Upload a set of requests from a CSV",fullDescription:`If you need to upload a set of requests from a CSV, you can run this command.
This command uses inquirer to prompt the user to map the shape of the CSV to the shape of the Transcend API. There is no requirement for the shape of the incoming CSV, as the script will handle the mapping process.

The script will also produce a JSON cache file, that allows for the mappings to be preserved between runs.`}});var ge=Ft({routes:{approve:B,upload:be,"download-files":H,cancel:L,restart:pe,"notify-additional-time":re,"mark-silent":ee,"enricher-restart":X,"reject-unverified-identifiers":de,export:Z,"skip-preflight-jobs":ce,system:he,preflight:ne,cron:$},docs:{brief:"All commands related to DSR requests"}});var Gt=Lt({routes:{request:ge,consent:R,inventory:x,admin:k,migration:O,install:Ot("@transcend-io/transcend",{bash:"__@transcend-io/cli_bash_complete"}),uninstall:Bt("@transcend-io/transcend",{bash:!0})},docs:{brief:m,hideRoute:{install:!0,uninstall:!0}}}),hi=Wt(Gt,{name:d,versionInfo:{currentVersion:u}});export{hi as a};
